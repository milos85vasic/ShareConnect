plugins {

    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id("com.google.devtools.ksp")
    id 'jacoco'

    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.appdistribution'
}

// Load signing configuration from env.properties file if they exist
def envProperties = new Properties()
def envPropertiesFile = rootProject.file('env.properties')

if (envPropertiesFile.exists()) {

    envPropertiesFile.withInputStream { envProperties.load(it) }
}

// Process variable substitutions (e.g., $VAR_NAME)
envProperties.each { key, value ->

    if (value.startsWith('$')) {

        def refKey = value.substring(1)
        def refValue = envProperties.getProperty(refKey)

        if (refValue != null) {

            envProperties.setProperty(key, refValue)
        }
    }
}

// Helper function to get property from env file or system environment
def getEnvProperty = { String key ->

    return envProperties.getProperty(key) ?: System.getenv(key) ?: ""
}

android {

    compileSdk 36
    namespace "${shareconnect_application_name}"

    defaultConfig {

        minSdk 28
        targetSdk 36
        versionName "$shareconnect_version"
        versionCode shareconnect_version_code
        applicationId "$shareconnect_application_name"

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {

        DEVELOPMENT {

            def devKeystorePath = getEnvProperty("SHARECONNECT_DEV_KEYSTORE_PATH")
            def devKeystoreFile = file(devKeystorePath.isEmpty() ? "Signing/dev.jks" : devKeystorePath)

            if (devKeystoreFile.exists()) {
                keyAlias getEnvProperty("SHARECONNECT_DEV_KEY_ALIAS")
                keyPassword getEnvProperty("SHARECONNECT_DEV_KEY_PASSWORD")
                storePassword getEnvProperty("SHARECONNECT_DEV_STORE_PASSWORD")
                storeFile devKeystoreFile
            }
        }

        CLOUD {

            def cloudKeystorePath = getEnvProperty("SHARECONNECT_CLOUD_KEYSTORE_PATH")
            def cloudKeystoreFile = file(cloudKeystorePath.isEmpty() ? "Signing/cloud.jks" : cloudKeystorePath)

            if (cloudKeystoreFile.exists()) {
                keyAlias getEnvProperty("SHARECONNECT_CLOUD_KEY_ALIAS")
                keyPassword getEnvProperty("SHARECONNECT_CLOUD_KEY_PASSWORD")
                storePassword getEnvProperty("SHARECONNECT_CLOUD_STORE_PASSWORD")
                storeFile cloudKeystoreFile
            }
        }
    }

    buildTypes {

        release {

            minifyEnabled true
            shrinkResources false
            // Only use signing config if keystore exists
            def cloudKeystorePath = getEnvProperty("SHARECONNECT_CLOUD_KEYSTORE_PATH")
            def cloudKeystoreFile = file(cloudKeystorePath.isEmpty() ? "Signing/cloud.jks" : cloudKeystorePath)
            if (cloudKeystoreFile.exists()) {
                signingConfig signingConfigs.CLOUD
            }
            manifestPlaceholders = [crashlyticsCollectionEnabled: "true"]
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'missing_rules.txt'

            firebaseAppDistribution {

                releaseNotes="ShareConnect internal testing release"
                groups="${getEnvProperty("FIREBASE_DISTRIBUTION_PROD_GROUP")}"
                appId="${getEnvProperty("FIREBASE_DISTRIBUTION_PROD_APP_ID")}"
                artifactType="${getEnvProperty("FIREBASE_DISTRIBUTION_PROD_ARTIFACT_TYPE")}"
                serviceCredentialsFile="${getEnvProperty("FIREBASE_DISTRIBUTION_PROD_APP_CREDENTIALS_FILE")}"
            }
        }

        debug {

            minifyEnabled false
            shrinkResources false
            applicationIdSuffix ".debug"
            // Only use signing config if keystore exists
            def devKeystorePath = getEnvProperty("SHARECONNECT_DEV_KEYSTORE_PATH")
            def devKeystoreFile = file(devKeystorePath.isEmpty() ? "Signing/dev.jks" : devKeystorePath)
            if (devKeystoreFile.exists()) {
                signingConfig signingConfigs.DEVELOPMENT
            }
            manifestPlaceholders = [crashlyticsCollectionEnabled: "false"]
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlin {

        compilerOptions {

            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17)
        }
    }

    packagingOptions {

        jniLibs {

            excludes += ['META-INF/*']
        }

        resources {

            excludes += ['META-INF/*', 'LICENSE-2.0.txt', 'META-INF/DEPENDENCIES',
                         'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE',
                         'META-INF/NOTICE.txt', 'META-INF/versions/9/OSGI-INF/MANIFEST.MF']
        }
    }

    sourceSets {
        debug {
            java.srcDirs += "build/generated/ksp/debug/kotlin"
        }
        release {
            java.srcDirs += "build/generated/ksp/release/kotlin"
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}



configurations.all {
    resolutionStrategy {
        // Force specific versions that might conflict
        force 'androidx.room:room-runtime:2.6.1'
        force 'androidx.room:room-ktx:2.6.1'
        force 'androidx.room:room-compiler:2.6.1'
        force 'androidx.room:room-testing:2.6.1'
    }
}

dependencies {
    // Centralized dependencies
    implementation(project(":Dependencies")) {
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
        exclude group: 'org.bouncycastle', module: 'bcpkix-jdk15on'
    }

    // Project modules
    implementation project(":DesignSystem")
    implementation project(":Onboarding")
    implementation project("${toolkit_context}:Main")
    implementation project(":Tests")
    implementation project("${toolkit_context}:Analytics")
    implementation project(":Asinka:asinka")
    implementation project(":ThemeSync")
    implementation project(":ProfileSync")
    implementation project(":HistorySync")
    implementation project(":RSSSync")
    implementation project(":BookmarkSync")
    implementation project(":PreferencesSync")
    implementation project(":LanguageSync")
    implementation project(":TorrentSharingSync")
    implementation project(":Localizations")
    implementation project(':Toolkit:SecurityAccess')
    implementation project(':Toolkit:QRScanner')

    // Room KSP compiler for database code generation
    ksp "androidx.room:room-compiler:2.6.1"
}
