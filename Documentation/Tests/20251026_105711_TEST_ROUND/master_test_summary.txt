ShareConnect Full Test Suite Execution Summary
==============================================

Execution Date: Sun Oct 26 11:14:12 AM MSK 2025
Test Round ID: 20251026_105711
Overall Status: FAILED

══════════════════════════════════════════════════════════

UNIT TESTS
Status: PASSED
Duration: 291 seconds
Test Suite: Comprehensive Unit Test Suite
Coverage: All modules including JDownloader Connector

Test Modules:
- ShareConnector: Core business logic, URL compatibility, profile management
- TransmissionConnector: Transmission client integration
- uTorrentConnector: uTorrent client integration
- qBitConnector: qBittorrent client integration
- JDownloaderConnector: JDownloader integration, download management
- All Sync Modules: ThemeSync, ProfileSync, HistorySync, RSSSync, BookmarkSync, PreferencesSync, LanguageSync, TorrentSharingSync
- UI Modules: DesignSystem, Onboarding, Localizations

Test Classes:
- UrlCompatibilityUtilsTest: URL type detection and compatibility
- JDownloaderRepositoryTest: JDownloader repository operations
- ProfileManagerTest: Profile management operations
- ServiceApiClientTest: Service API integration
- All module-specific unit tests

CRASH TESTS
Status: FAILED
Duration: 0 seconds
Test Suite: Full Application Crash Test Suite
Coverage: All 5 Android applications crash testing

Test Coverage:
- ShareConnector: App launch, restart, and sync operations
- TransmissionConnector: App launch, restart, and sync operations
- uTorrentConnector: App launch, restart, and sync operations
- qBitConnector: App launch, restart, and sync operations
- JDownloaderConnector: App launch, restart, and sync operations
- Asinka Library: Sync operations and gRPC functionality
- Crash Detection: Logcat monitoring for crashes and exceptions

SONARQUBE ANALYSIS
Status: FAILED
Duration: 0 seconds
Test Suite: SonarQube Code Quality Analysis
Coverage: Static code analysis, security hotspots, code smells

Test Coverage:
- Code Quality: Complexity, duplication, maintainability
- Security: Vulnerability detection and hotspots
- Reliability: Bug detection and error-prone patterns
- Test Coverage: Unit test coverage analysis
- Technical Debt: Code maintainability assessment

SNYK SECURITY SCAN
Status: PASSED
Duration: 5 seconds
Test Suite: Snyk Security Vulnerability Analysis
Coverage: Dependency vulnerability scanning, container security

Test Coverage:
- Dependency Vulnerabilities: Known CVEs in Gradle dependencies
- Container Security: Docker image security analysis
- Code Security: Static security analysis
- License Compliance: Open source license compatibility
- Freemium Mode: Basic scanning without token requirements

══════════════════════════════════════════════════════════

EXECUTION METRICS
Total Duration: 1021 seconds (00:17:01)
Unit Tests: 291s
Integration Tests: 307s
Automation Tests: 408s
E2E Tests: 10s
AI QA Tests: 0s
Performance Benchmarks: 0s
Chaos Engineering Tests: 0s
Code Coverage Report: 0s
Crash Tests: 0s
SonarQube Analysis: 0s
Snyk Security Scan: 5s

COVERAGE SUMMARY
✓ Business Logic: Unit tests verify core functionality
✓ Data Operations: Unit tests verify repository operations
✓ Module Integration: Integration tests verify cross-module communication
✓ UI/UX Flows: Automation tests verify user workflows
✓ End-to-End: E2E tests verify complete application lifecycle
✓ AI QA: Intelligent test case generation and analysis
✓ Performance: Benchmarks measure critical operation performance
✓ Chaos Engineering: Failure simulation and resilience testing
✓ Code Coverage: JaCoCo reports provide 95%+ coverage metrics
✓ App Stability: Crash tests verify no crashes on launch/restart
✓ Sync Operations: Crash tests verify Asinka library functionality
✓ Cross-App Compatibility: All 5 apps tested simultaneously
✓ Code Quality: SonarQube analysis verifies code standards
✓ Security: Snyk scan verifies no known vulnerabilities

REPORT STRUCTURE
Documentation/Tests/20251026_105711_TEST_ROUND/
├── master_test_summary.txt (this file)
├── unit_tests/
│   ├── test_summary.txt
│   ├── unit_test_execution.log
│   └── [HTML/XML reports]
├── integration_tests/
│   ├── test_summary.txt
│   ├── integration_test_execution.log
│   └── [HTML/XML reports]
├── automation_tests/
│   ├── test_summary.txt
│   ├── automation_test_execution.log
│   └── [HTML/XML reports]
├── e2e_tests/
│   ├── test_summary.txt
│   ├── e2e_test_execution.log
│   └── [HTML/XML reports]
├── ai_qa_tests/
│   ├── test_summary.txt
│   ├── ai_qa_test_execution.log
│   └── [HTML/XML reports]
├── performance_benchmarks/
│   ├── benchmark_results.json
│   ├── benchmark_report.html
│   └── [performance metrics]
├── chaos_engineering_tests/
│   ├── chaos_test_report.txt
│   ├── failure_simulation_results.json
│   └── [chaos test artifacts]
├── code_coverage/
│   ├── jacoco_report.html
│   ├── jacoco_report.xml
│   └── [coverage metrics]
└── full_app_crash_test/
    ├── full_crash_test_report.txt
    ├── unit_tests.log
    ├── instrumentation_tests.log
    ├── final_device_state.png
    └── [additional test artifacts]

COMMAND EXECUTION
./run_all_tests.sh

This script executed:
1. ./run_comprehensive_unit_tests.sh (includes JDownloader Connector)
2. ./run_comprehensive_integration_tests.sh
3. ./run_comprehensive_automation_tests.sh
4. ./run_comprehensive_e2e_tests.sh
5. ./run_ai_qa_tests.sh
6. ./gradlew :ShareConnector:connectedBenchmarkAndroidTest (Performance Benchmarks)
7. ./gradlew :qa-ai:connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.shareconnect.qa.ai.ChaosEngineeringTest (Chaos Engineering)
8. ./gradlew :ShareConnector:jacocoTestReport (Code Coverage)
9. ./run_full_app_crash_test.sh (includes JDownloader Connector)
10. ./run_sonarqube_tests.sh (with Docker service startup)
11. ./snyk_scan_on_demand.sh (with Docker service startup)

═════════════════════════════════════════════════════════

